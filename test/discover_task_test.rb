require "test_helper"

# TODO: test when {start_activity_json_id} is wrong

class DiscoverTaskTest < Minitest::Spec
  after { `rm -r test/tmp/app/concepts/posting/collaboration/generated` }
  # after { `rm test/tmp/test/bla_test.rb` }

  TEST_ROOT = "test/tmp"

  it "Discovery task: discover, serialize, create test plan, create state table/state guards" do
    Dir.chdir(TEST_ROOT) do
      Trailblazer::Workflow::Task::Discover.(
        json_filename: "../fixtures/v1/posting-v11.json",
        start_lane: "UI",

        dsl_options_for_run_multiple_times: {
          ["UI", "Create"] => {ctx_merge: {:"⛾.lifecycle.posting:Create" => Trailblazer::Activity::Left}, config_payload: {outcome: :failure}},
          # Click [UI Update] again, with invalid data.
          ["UI", "Update"] => {ctx_merge: {:"⛾.lifecycle.posting:Update" => Trailblazer::Activity::Left}, config_payload: {outcome: :failure}},
          ["UI", "Revise"] => {ctx_merge: {:"⛾.lifecycle.posting:Revise" => Trailblazer::Activity::Left}, config_payload: {outcome: :failure}},
        },

        namespace: "Posting::Collaboration",
        target_dir: "app/concepts/posting/collaboration",
        test_filename: "test/bla_test.rb",
      )
    end

    #@ We serialized the discovered iterations, so we don't need to run discovery on every startup.
    assert_equal (serialized_iteration_set = File.read("#{TEST_ROOT}/app/concepts/posting/collaboration/generated/iteration_set.json")).size, 37417

# raise
#     iteration_set = Trailblazer::Workflow::Introspect::Iteration::Set.from_discovered_states(states, lanes_cfg: lanes_cfg)


    schema, _ = build_schema()
    iteration_set_from_json = Trailblazer::Workflow::Introspect::Iteration::Set::Deserialize.(JSON.parse(serialized_iteration_set), lanes_cfg: schema.to_h[:lanes])

    # TODO: test {Set#to_a}
    assert_equal iteration_set_from_json.to_a.size, 22

    #@ Assert test plan

    #@ Assert {state_guards.rb}
    assert_equal File.read("#{TEST_ROOT}/app/concepts/posting/collaboration/state_guards.rb"),
%(module Posting::Collaboration
  module StateGuards
    Decider = Trailblazer::Workflow::Collaboration::StateGuards.from_user_hash(
      {
        "⏸︎ Approve♦Reject [000]"                   => {guard: ->(ctx, model:, **) { model.state == "⏸︎ Approve♦Reject [000]" }},
        "⏸︎ Archive [100]"                          => {guard: ->(ctx, model:, **) { model.state == "⏸︎ Archive [100]" }},
        "⏸︎ Create [010]"                           => {guard: ->(ctx, model:, **) { model.state == "⏸︎ Create [010]" }},
        "⏸︎ Create form [000]"                      => {guard: ->(ctx, model:, **) { model.state == "⏸︎ Create form [000]" }},
        "⏸︎ Delete♦Cancel [110]"                    => {guard: ->(ctx, model:, **) { model.state == "⏸︎ Delete♦Cancel [110]" }},
        "⏸︎ Revise [010]"                           => {guard: ->(ctx, model:, **) { model.state == "⏸︎ Revise [010]" }},
        "⏸︎ Revise form [000]"                      => {guard: ->(ctx, model:, **) { model.state == "⏸︎ Revise form [000]" }},
        "⏸︎ Revise form♦Notify approver [110]"      => {guard: ->(ctx, model:, **) { model.state == "⏸︎ Revise form♦Notify approver [110]" }},
        "⏸︎ Update [000]"                           => {guard: ->(ctx, model:, **) { model.state == "⏸︎ Update [000]" }},
        "⏸︎ Update form♦Delete? form♦Publish [110]" => {guard: ->(ctx, model:, **) { model.state == "⏸︎ Update form♦Delete? form♦Publish [110]" }},
        "⏸︎ Update form♦Notify approver [000]"      => {guard: ->(ctx, model:, **) { model.state == "⏸︎ Update form♦Notify approver [000]" }},
        "⏸︎ Update form♦Notify approver [110]"      => {guard: ->(ctx, model:, **) { model.state == "⏸︎ Update form♦Notify approver [110]" }},
      },
      state_table: Generated::StateTable,
    )
  end
end
)

    assert_equal File.read("#{TEST_ROOT}/app/concepts/posting/collaboration/generated/state_table.rb"),
%(# This file is generated by trailblazer-workflow.
module Posting::Collaboration::Generated
  StateTable = {
    "⏸︎ Approve♦Reject [000]"                   => {suspend_tuples: [["lifecycle", "suspend-Gateway_0y3f8tz"], ["UI", "suspend-Gateway_063k28q"], ["editor", "suspend-Gateway_02veylj"]], catch_tuples: [["editor", "catch-before-Activity_13fw5nm"], ["editor", "catch-before-Activity_1j7d8sd"]]},
    "⏸︎ Archive [100]"                          => {suspend_tuples: [["lifecycle", "suspend-gw-to-catch-before-Activity_1hgscu3"], ["UI", "suspend-gw-to-catch-before-Activity_0fy41qq"], ["editor", "suspend-gw-to-catch-before-Activity_05zip3u"]], catch_tuples: [["UI", "catch-before-Activity_0fy41qq"]]},
    "⏸︎ Create [010]"                           => {suspend_tuples: [["lifecycle", "suspend-gw-to-catch-before-Activity_0wwfenp"], ["UI", "suspend-Gateway_14h0q7a"], ["editor", "suspend-gw-to-catch-before-Activity_05zip3u"]], catch_tuples: [["UI", "catch-before-Activity_1psp91r"]]},
    "⏸︎ Create form [000]"                      => {suspend_tuples: [["lifecycle", "suspend-gw-to-catch-before-Activity_0wwfenp"], ["UI", "suspend-gw-to-catch-before-Activity_0wc2mcq"], ["editor", "suspend-gw-to-catch-before-Activity_05zip3u"]], catch_tuples: [["UI", "catch-before-Activity_0wc2mcq"]]},
    "⏸︎ Delete♦Cancel [110]"                    => {suspend_tuples: [["lifecycle", "suspend-Gateway_1hp2ssj"], ["UI", "suspend-Gateway_100g9dn"], ["editor", "suspend-gw-to-catch-before-Activity_05zip3u"]], catch_tuples: [["UI", "catch-before-Activity_15nnysv"], ["UI", "catch-before-Activity_1uhozy1"]]},
    "⏸︎ Revise [010]"                           => {suspend_tuples: [["lifecycle", "suspend-Gateway_01p7uj7"], ["UI", "suspend-Gateway_1xs96ik"], ["editor", "suspend-gw-to-catch-before-Activity_05zip3u"]], catch_tuples: [["UI", "catch-before-Activity_1wiumzv"]]},
    "⏸︎ Revise form [000]"                      => {suspend_tuples: [["lifecycle", "suspend-Gateway_01p7uj7"], ["UI", "suspend-gw-to-catch-before-Activity_0zsock2"], ["editor", "suspend-gw-to-catch-before-Activity_05zip3u"]], catch_tuples: [["UI", "catch-before-Activity_0zsock2"]]},
    "⏸︎ Revise form♦Notify approver [110]"      => {suspend_tuples: [["lifecycle", "suspend-Gateway_1kl7pnm"], ["UI", "suspend-Gateway_1xnsssa"], ["editor", "suspend-gw-to-catch-before-Activity_05zip3u"]], catch_tuples: [["UI", "catch-before-Activity_0zsock2"], ["UI", "catch-before-Activity_1dt5di5"]]},
    "⏸︎ Update [000]"                           => {suspend_tuples: [["lifecycle", "suspend-Gateway_0fnbg3r"], ["UI", "suspend-Gateway_0nxerxv"], ["editor", "suspend-gw-to-catch-before-Activity_05zip3u"]], catch_tuples: [["UI", "catch-before-Activity_0j78uzd"]]},
    "⏸︎ Update form♦Delete? form♦Publish [110]" => {suspend_tuples: [["lifecycle", "suspend-Gateway_1hp2ssj"], ["UI", "suspend-Gateway_1sq41iq"], ["editor", "suspend-gw-to-catch-before-Activity_05zip3u"]], catch_tuples: [["UI", "catch-before-Activity_1165bw9"], ["UI", "catch-before-Activity_0ha7224"], ["UI", "catch-before-Activity_0bsjggk"]]},
    "⏸︎ Update form♦Notify approver [000]"      => {suspend_tuples: [["lifecycle", "suspend-Gateway_0fnbg3r"], ["UI", "suspend-Gateway_0kknfje"], ["editor", "suspend-gw-to-catch-before-Activity_05zip3u"]], catch_tuples: [["UI", "catch-before-Activity_1165bw9"], ["UI", "catch-before-Activity_1dt5di5"]]},
    "⏸︎ Update form♦Notify approver [110]"      => {suspend_tuples: [["lifecycle", "suspend-Gateway_1wzosup"], ["UI", "suspend-Gateway_1g3fhu2"], ["editor", "suspend-gw-to-catch-before-Activity_05zip3u"]], catch_tuples: [["UI", "catch-before-Activity_1165bw9"], ["UI", "catch-before-Activity_1dt5di5"]]},
  }
end
)

  end

  it "Test plan " do
    # schema = build_schema()

    # Trailblazer::Workflow::Task::Discover::RenderTestPlan.(iteration_set: "test/tmp/bla.json")

  end
end
